<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CYDRAIN 的博客</title>
  
  <subtitle>by Darren Cai</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cydrain.github.io/"/>
  <updated>2017-12-10T08:11:48.000Z</updated>
  <id>http://cydrain.github.io/</id>
  
  <author>
    <name>Darren Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现简单内存管理-2</title>
    <link href="http://cydrain.github.io/2017/12/10/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-2/"/>
    <id>http://cydrain.github.io/2017/12/10/实现简单内存管理-2/</id>
    <published>2017-12-10T04:09:13.000Z</published>
    <updated>2017-12-10T08:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>用内存池的方式实现简单的内存管理。</p><p>一个内存池只提供一定大小的内存结点，如4-byte，8-byte，16-byte … …<br>malloc 的时候，从<code>avail_head</code>拿，加到<code>used_tail</code>；<br>free 的时候，从<code>used_head</code>~<code>used_tail</code>链表中搜到该结点并删除，然后加回<code>avail_tail</code>。</p><p>内存池结构体定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct _mem_pool &#123;</span><br><span class="line">    short       pool_size;      // 内存池容量</span><br><span class="line">    short       node_size;      // 每个内存结点提供的内存大小</span><br><span class="line">    short       node_num;       // 内存结点数目</span><br><span class="line">    short       used_num;       // 已使用内存结点数目</span><br><span class="line">    mem_node    avail_head;     // 空内存结点头</span><br><span class="line">    mem_node    avail_tail;     // 空内存结点尾</span><br><span class="line">    mem_node    used_head;      // 已使用内存结点头</span><br><span class="line">    mem_node    used_tail;      // 已使用内存结点尾</span><br><span class="line">    void*       data_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>内存结点结构体定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct _mem_node &#123;</span><br><span class="line">    short       used;</span><br><span class="line">    short       index;</span><br><span class="line">    mem_node*   prev;</span><br><span class="line">    mem_node*   next;</span><br><span class="line">    char        addr[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line"></span><br><span class="line">typedef unsigned long ulong;</span><br><span class="line">typedef struct _mem_node mem_node;</span><br><span class="line">struct _mem_node &#123;</span><br><span class="line">    short       used;</span><br><span class="line">    short       index;</span><br><span class="line">    mem_node*   prev;</span><br><span class="line">    mem_node*   next;</span><br><span class="line">    char        addr[0];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef struct _mem_pool mem_pool;</span><br><span class="line">struct _mem_pool &#123;</span><br><span class="line">    short       pool_size;</span><br><span class="line">    short       node_size;</span><br><span class="line">    short       node_num;</span><br><span class="line">    short       used_num;</span><br><span class="line">    mem_node    avail_head;</span><br><span class="line">    mem_node    avail_tail;</span><br><span class="line">    mem_node    used_head;</span><br><span class="line">    mem_node    used_tail;</span><br><span class="line">    void*       data_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">enum &#123;</span><br><span class="line">    MEM_POOL_4 = 0,</span><br><span class="line">    MEM_POOL_8,</span><br><span class="line">    MEM_POOL_16,</span><br><span class="line">    MEM_POOL_32,</span><br><span class="line">    MEM_POOL_64,</span><br><span class="line">    MEM_POOL_128,</span><br><span class="line">    MEM_POOL_256,</span><br><span class="line">    MEM_POOL_NUM</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">mem_pool* mem_pool_array[MEM_POOL_NUM];</span><br><span class="line"></span><br><span class="line">/* detach mem_node from random position */</span><br><span class="line">void mem_node_detach(mem_node* node, mem_node* head, mem_node* tail)</span><br><span class="line">&#123;</span><br><span class="line">    assert(node != NULL);</span><br><span class="line">    node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* pop the first mem_node */</span><br><span class="line">mem_node* mem_node_pop(mem_node* head, mem_node* tail)</span><br><span class="line">&#123;</span><br><span class="line">    mem_node* node;</span><br><span class="line">    node = head-&gt;next;</span><br><span class="line">    head-&gt;next = node-&gt;next;</span><br><span class="line">    node-&gt;next-&gt;prev = head;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* append mem_node to the list tail */</span><br><span class="line">void mem_node_append(mem_node* node, mem_node* head, mem_node* tail)</span><br><span class="line">&#123;</span><br><span class="line">    assert(node != NULL);</span><br><span class="line">    tail-&gt;prev-&gt;next = node;</span><br><span class="line">    node-&gt;next = tail;</span><br><span class="line">    node-&gt;prev = tail-&gt;prev;</span><br><span class="line">    tail-&gt;prev = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mem_pool* mem_pool_init(int node_size, int node_num)</span><br><span class="line">&#123;</span><br><span class="line">    mem_pool* pool = NULL;</span><br><span class="line">    mem_node* node = NULL;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    pool = (mem_pool*)malloc(sizeof(mem_pool));</span><br><span class="line">    if (pool == NULL) &#123;</span><br><span class="line">        printf(&quot;mem_pool malloc fail!\n&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memset(pool, 0, sizeof(mem_pool));</span><br><span class="line">    pool-&gt;node_size = node_size;</span><br><span class="line">    pool-&gt;node_num = node_num;</span><br><span class="line">    pool-&gt;pool_size = node_num * (node_size + sizeof(mem_node));</span><br><span class="line"></span><br><span class="line">    pool-&gt;data_addr = malloc(pool-&gt;pool_size);</span><br><span class="line">    if (pool-&gt;data_addr == NULL) &#123;</span><br><span class="line">        printf(&quot;Fail to malloc %d bytes memory for mem_pool %p\n&quot;,</span><br><span class="line">                pool-&gt;pool_size, pool);</span><br><span class="line">        goto FAIL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool-&gt;avail_head.next = &amp;pool-&gt;avail_tail;</span><br><span class="line">    pool-&gt;avail_tail.prev = &amp;pool-&gt;avail_head;</span><br><span class="line">    pool-&gt;used_head.next = &amp;pool-&gt;used_tail;</span><br><span class="line">    pool-&gt;used_tail.prev = &amp;pool-&gt;used_head;</span><br><span class="line"></span><br><span class="line">    pool-&gt;avail_head.index = -1;</span><br><span class="line">    pool-&gt;avail_tail.index = -1;</span><br><span class="line">    pool-&gt;used_head.index = -1;</span><br><span class="line">    pool-&gt;used_tail.index = -1;</span><br><span class="line"></span><br><span class="line">    node = (mem_node*)pool-&gt;data_addr;</span><br><span class="line">    for (i = 0; i &lt; node_num; i++) &#123;</span><br><span class="line">        node-&gt;used = 0;</span><br><span class="line">        node-&gt;index = i;</span><br><span class="line">        mem_node_append(node, &amp;pool-&gt;avail_head, &amp;pool-&gt;avail_tail);</span><br><span class="line">        node = (mem_node*)((ulong)node + sizeof(mem_node) + node_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return pool;</span><br><span class="line">FAIL:</span><br><span class="line">    if (pool != NULL) free(pool);</span><br><span class="line">    return NULL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mem_pool_free(mem_pool* ptr)</span><br><span class="line">&#123;</span><br><span class="line">    assert(ptr != NULL);</span><br><span class="line">    free(ptr-&gt;data_addr);</span><br><span class="line">    free(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mem_pool_show(mem_pool* pool)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;MEM_POOL %p:\n&quot;, pool);</span><br><span class="line">    printf(&quot;\tpool_size\t: %d\n&quot;, pool-&gt;pool_size);</span><br><span class="line">    printf(&quot;\tnode_size\t: %d\n&quot;, pool-&gt;node_size);</span><br><span class="line">    printf(&quot;\tnode_num\t: %d\n&quot;, pool-&gt;node_num);</span><br><span class="line">    printf(&quot;\tused_num\t: %d\n&quot;, pool-&gt;used_num);</span><br><span class="line">    printf(&quot;\tdata_addr\t: %p\n&quot;, pool-&gt;data_addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mem_pool_array_init(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; MEM_POOL_NUM; i++) &#123;</span><br><span class="line">        mem_pool_array[i] = mem_pool_init(1&lt;&lt;(i+2), 100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mem_pool_array_free(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; MEM_POOL_NUM; i++) &#123;</span><br><span class="line">        mem_pool_free(mem_pool_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mem_pool_array_show(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; MEM_POOL_NUM; i++) &#123;</span><br><span class="line">        mem_pool_show(mem_pool_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mem_pool* get_mem_pool_by_size(size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; MEM_POOL_NUM; i++) &#123;</span><br><span class="line">        if (size &lt;= mem_pool_array[i]-&gt;node_size) break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return mem_pool_array[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mem_pool* get_mem_pool_by_addr(void* addr)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; MEM_POOL_NUM; i++) &#123;</span><br><span class="line">        if (addr &gt; mem_pool_array[i]-&gt;data_addr &amp;&amp;</span><br><span class="line">            addr &lt; (void*)((ulong)mem_pool_array[i]-&gt;data_addr + mem_pool_array[i]-&gt;pool_size))</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return mem_pool_array[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void* myMalloc(size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    mem_pool* pool = NULL;</span><br><span class="line">    mem_node* node = NULL;</span><br><span class="line"></span><br><span class="line">    pool = get_mem_pool_by_size(size);</span><br><span class="line">    if (pool == NULL) &#123;</span><br><span class="line">        printf(&quot;Fail to get valid mem_pool for size %d.\n&quot;, (int)size);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (pool-&gt;used_num == pool-&gt;node_num) &#123;</span><br><span class="line">        printf(&quot;mem_pool with node size %d is full\n&quot;, pool-&gt;node_size);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node = mem_node_pop(&amp;pool-&gt;avail_head, &amp;pool-&gt;avail_tail);</span><br><span class="line">    assert(node-&gt;used == 0);</span><br><span class="line">    node-&gt;used = 1;</span><br><span class="line">    mem_node_append(node, &amp;pool-&gt;used_head, &amp;pool-&gt;used_tail);</span><br><span class="line">    pool-&gt;used_num++;</span><br><span class="line"></span><br><span class="line">    return node-&gt;addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void myFree(void* ptr)</span><br><span class="line">&#123;</span><br><span class="line">    mem_pool* pool = NULL;</span><br><span class="line">    mem_node* node = NULL;</span><br><span class="line"></span><br><span class="line">    pool = get_mem_pool_by_addr(ptr);</span><br><span class="line"></span><br><span class="line">    node = (mem_node*)((ulong)ptr - sizeof(mem_node));</span><br><span class="line">    assert(node-&gt;used == 1);</span><br><span class="line">    mem_node_detach(node, &amp;pool-&gt;used_head, &amp;pool-&gt;used_tail);</span><br><span class="line">    node-&gt;used = 0;</span><br><span class="line">    mem_node_append(node, &amp;pool-&gt;avail_head, &amp;pool-&gt;avail_tail);</span><br><span class="line">    pool-&gt;used_num--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define TEST_NUM        100000</span><br><span class="line">#define ARRAY_NUM       200</span><br><span class="line">#define MAX_MALLOC_SIZE 150</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i, idx;</span><br><span class="line">    void* ptr[ARRAY_NUM];</span><br><span class="line"></span><br><span class="line">    mem_pool_array_init();</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; ARRAY_NUM; i++) &#123;</span><br><span class="line">        ptr[i] = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; TEST_NUM; i++) &#123;</span><br><span class="line">        idx = random() % ARRAY_NUM;</span><br><span class="line">        if (ptr[idx] == NULL) &#123;</span><br><span class="line">            ptr[idx] = myMalloc(random() % MAX_MALLOC_SIZE + 1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            myFree(ptr[idx]);</span><br><span class="line">            ptr[idx] = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mem_pool_array_show();</span><br><span class="line"></span><br><span class="line">    mem_pool_array_free();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用内存池的方式实现简单的内存管理。&lt;/p&gt;
&lt;p&gt;一个内存池只提供一定大小的内存结点，如4-byte，8-byte，16-byte … …&lt;br&gt;malloc 的时候，从&lt;code&gt;avail_head&lt;/code&gt;拿，加到&lt;code&gt;used_tail&lt;/code&gt;；&lt;b
      
    
    </summary>
    
      <category term="Memory" scheme="http://cydrain.github.io/categories/Memory/"/>
    
    
  </entry>
  
  <entry>
    <title>实现简单内存管理-1</title>
    <link href="http://cydrain.github.io/2017/12/10/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-1/"/>
    <id>http://cydrain.github.io/2017/12/10/实现简单内存管理-1/</id>
    <published>2017-12-10T03:56:16.000Z</published>
    <updated>2017-12-10T07:51:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一块给定的内存上实现简单的内存管理。</p><p>在内存中划出一块用作<code>mem_node</code>，malloc/free 的内存信息存在一个个<code>mem_node</code>中。<br><code>mem_node</code>的结构体定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    short used;</span><br><span class="line">    short size;</span><br><span class="line">    void* start_addr;</span><br><span class="line">&#125; mem_node;</span><br></pre></td></tr></table></figure></p><p>在 free 的时候，需要检查当前<code>mem_node</code>的头或尾是否与别的<code>mem_node</code>相连，<br>如果有的话，合并两个结点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Realize simple malloc/free in a given block of memory</span><br><span class="line"> *</span><br><span class="line"> *   +-------------------------------------------------</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                  Memory  Pool                 |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *   | mem_node1 | mem_node2 | mem_node3 | mem_node4 |</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *   | mem_node5 | mem_node6 | mem_node7 | mem_node8 |</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *   |  ... ...  |  ... ...  |  ... ...  |  ... ...  |</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *   |  ... ...  | mem_node98| mem_node99|mem_node100|</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *   |                                               |</span><br><span class="line"> *   +-----------------------------------------------+</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define MEM_SIZE    10240</span><br><span class="line">#define NODE_NUM    100</span><br><span class="line"></span><br><span class="line">#define _DEBUG_     0</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    short used;</span><br><span class="line">    short size;</span><br><span class="line">    void* start_addr;</span><br><span class="line">&#125; mem_node;</span><br><span class="line"></span><br><span class="line">char mem[MEM_SIZE];</span><br><span class="line">mem_node* node;</span><br><span class="line"></span><br><span class="line">void init(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    </span><br><span class="line">    memset(mem, &apos;\0&apos;, MEM_SIZE);</span><br><span class="line">    </span><br><span class="line">    node = (mem_node*)(mem + MEM_SIZE - NODE_NUM * sizeof(mem_node));</span><br><span class="line">    for (i = 0; i &lt; NODE_NUM; i++) &#123;</span><br><span class="line">        node[i].used = 0;</span><br><span class="line">        node[i].size = 0;</span><br><span class="line">        node[i].start_addr = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node[0].start_addr = mem;</span><br><span class="line">    node[0].size = MEM_SIZE - NODE_NUM * sizeof(mem_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showMemNode(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; NODE_NUM; i++) &#123;</span><br><span class="line">        printf(&quot;Node %02d: used %d, size %4d, start_addr %p\n&quot;,</span><br><span class="line">                i, node[i].used, node[i].size, node[i].start_addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void* myMalloc(size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; NODE_NUM; i++) &#123;</span><br><span class="line">        if (node[i].used == 0 &amp;&amp; node[i].size &gt;= size) &#123;</span><br><span class="line">            if (node[i].size &gt; size) &#123;</span><br><span class="line">                for (j = 0; j &lt; NODE_NUM; j++) &#123;</span><br><span class="line">                    if (node[j].used == 0 &amp;&amp; node[j].size == 0) &#123;</span><br><span class="line">                        node[j].size = node[i].size - size;</span><br><span class="line">                        node[j].start_addr = node[i].start_addr + size;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (j == NODE_NUM) &#123;</span><br><span class="line">                    printf(&quot;Have reached the max memory nodes %d limits!\n&quot;, NODE_NUM);</span><br><span class="line">                    return NULL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            node[i].used = 1;</span><br><span class="line">            node[i].size = size;</span><br><span class="line"></span><br><span class="line">#if _DEBUG_</span><br><span class="line">            printf(&quot;malloc %d, %p\n&quot;, node[i].size, node[i].start_addr);</span><br><span class="line">#endif</span><br><span class="line">            return node[i].start_addr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;Cannot find enough memory piece %d!\n&quot;, (int)size);</span><br><span class="line">    //showMemNode();</span><br><span class="line"></span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void myFree(void* ptr)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; NODE_NUM; i++) &#123;</span><br><span class="line">        if (node[i].used == 1 &amp;&amp; node[i].start_addr == ptr) &#123;</span><br><span class="line">            node[i].used = 0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (i == NODE_NUM) &#123;</span><br><span class="line">        printf(&quot;Invalid free ptr %p!\n&quot;, ptr);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#if _DEBUG_</span><br><span class="line">    printf(&quot;free %d, %p\n&quot;, node[i].size, node[i].start_addr);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    /* merge node[i] backward */</span><br><span class="line">    for (j = 0; j &lt; NODE_NUM; j++) &#123;</span><br><span class="line">        if (node[j].used == 0 &amp;&amp;</span><br><span class="line">            node[j].start_addr == node[i].start_addr + node[i].size) &#123;</span><br><span class="line">            node[i].size += node[j].size;</span><br><span class="line"></span><br><span class="line">            node[j].size = 0;</span><br><span class="line">            node[j].start_addr = NULL;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* merge node[i] forward */</span><br><span class="line">    for (j = 0; j &lt; NODE_NUM; j++) &#123;</span><br><span class="line">        if (node[j].used == 0 &amp;&amp;</span><br><span class="line">            node[i].start_addr == node[j].start_addr + node[j].size) &#123;</span><br><span class="line">            node[j].size += node[i].size;</span><br><span class="line"></span><br><span class="line">            node[i].size = 0;</span><br><span class="line">            node[i].start_addr = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define TEST_NUM        100000</span><br><span class="line">#define ARRAY_NUM       100</span><br><span class="line">#define MAX_MALLOC_SIZE 200</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int i, idx;</span><br><span class="line">    void* ptr[ARRAY_NUM];</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; ARRAY_NUM; i++) &#123;</span><br><span class="line">        ptr[i] = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; TEST_NUM; i++) &#123;</span><br><span class="line">        idx = random() % ARRAY_NUM;</span><br><span class="line">        if (ptr[idx] == NULL) &#123;</span><br><span class="line">            ptr[idx] = myMalloc(random() % MAX_MALLOC_SIZE + 1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            myFree(ptr[idx]);</span><br><span class="line">            ptr[idx] = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    showMemNode();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一块给定的内存上实现简单的内存管理。&lt;/p&gt;
&lt;p&gt;在内存中划出一块用作&lt;code&gt;mem_node&lt;/code&gt;，malloc/free 的内存信息存在一个个&lt;code&gt;mem_node&lt;/code&gt;中。&lt;br&gt;&lt;code&gt;mem_node&lt;/code&gt;的结构体定义如下
      
    
    </summary>
    
      <category term="Memory" scheme="http://cydrain.github.io/categories/Memory/"/>
    
    
  </entry>
  
  <entry>
    <title>github.io 更新与备份</title>
    <link href="http://cydrain.github.io/2017/12/09/HelloWorld/"/>
    <id>http://cydrain.github.io/2017/12/09/HelloWorld/</id>
    <published>2017-12-09T06:06:13.000Z</published>
    <updated>2017-12-10T03:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="完整操作如下：（摘自知乎回答）"><a href="#完整操作如下：（摘自知乎回答）" class="headerlink" title="完整操作如下：（摘自知乎回答）"></a>完整操作如下：（摘自知乎回答）</h1><ol><li>创建仓库 cydrain.github.io;</li><li>创建两个分支：master 与 hexo;<br>git branch hexo</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）;</li><li>使用 git clone git@github.com:cydrain/cydrain.github.io.git 拷贝仓库;</li><li>在本地 cydrain.github.io 文件夹下通过Git bash依次执行<br>npm install hexo<br>hexo init<br>npm install<br>npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改 _config.yml 中的 deploy 参数，分支应为master；</li><li>依次执行<br>git add .<br>git commit -m “…”<br>git push origin hexo 提交网站相关的文件；</li><li>执行 hexo generate -d 生成网站并部署到 GitHub 上。</li></ol><h1 id="本地资料丢失"><a href="#本地资料丢失" class="headerlink" title="本地资料丢失"></a>本地资料丢失</h1><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：<br>使用 git clone git@github.com:cydrain/cydrain.github.io.git 拷贝仓库（默认分支为hexo）;<br>在本地新拷贝的 cydrain.github.io 文件夹下通过 Git bash 依次执行下列指令：<br>   npm install hexo<br>   npm install<br>   npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;完整操作如下：（摘自知乎回答）&quot;&gt;&lt;a href=&quot;#完整操作如下：（摘自知乎回答）&quot; class=&quot;headerlink&quot; title=&quot;完整操作如下：（摘自知乎回答）&quot;&gt;&lt;/a&gt;完整操作如下：（摘自知乎回答）&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建仓库 cydrain
      
    
    </summary>
    
      <category term="Github" scheme="http://cydrain.github.io/categories/Github/"/>
    
    
  </entry>
  
</feed>
